{"filter":false,"title":"roblockwar.dev.engine.js","tooltip":"/js/roblockwar.dev.engine.js","ace":{"folds":[],"scrolltop":2382.5,"scrollleft":0,"selection":{"start":{"row":49,"column":0},"end":{"row":49,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":276,"mode":"ace/mode/javascript"}},"hash":"a7f0ae01c4a26f4df3fe34aa7733bc0738bd6d3c","undoManager":{"mark":3,"position":3,"stack":[[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":190,"column":0},"action":"insert","lines":["var RoBlockWar = RoBlockWar || {};","","RoBlockWar.Boot = function (game) {","};","","//setting game configuration and loading the assets for the loading screen","RoBlockWar.Boot.prototype = {","  init: function () {","    this.input.maxPointers = 1;","    this.stage.disableVisibilityChange = true;","    this.scale.scaleMode = Phaser.ScaleManager.RESIZE;","  },","    ","  preload: function() {","    this.load.image('preloadbar', './assets/preloader-bar.png');","  },","  create: function() {","    this.state.start('Preloader');","  }","};","","//loading the game assets","RoBlockWar.Preloader = function (game) {","\tthis.background = null;","\tthis.preloadBar = null;","\tthis.ready = false;","};","","RoBlockWar.Preloader.prototype = {","  preload: function() {","    // show loading screen","    this.preloadBar = this.add.sprite(this.game.world.centerX, this.game.world.centerY, 'preloadbar');","","    this.load.setPreloadSprite(this.preloadBar);","","    // load game assets","    this.load.atlas('robot', './assets/tanks.png', './assets/tanks.json');","    this.load.atlas('enemy', './assets/enemy-tanks.png', './assets/tanks.json');","    this.load.image('logo', './assets/logo.png');","    this.load.image('bullet', './assets/bullet.png');","    this.load.image('earth', './assets/scorched_earth.png');","    this.load.spritesheet('kaboom', './assets/explosion.png', 64, 64, 23);","  },","  create: function() {","    this.state.start('Game');","  }","};","","RoBlockWar.Game = function (game) {","","\t//\tWhen a State is added to Phaser it automatically has the following properties set on it, even if they already exist:","\t","    this.game;\t\t//\ta reference to the currently running game","    this.add;\t\t//\tused to add sprites, text, groups, etc","    this.camera;\t//\ta reference to the game camera","    this.cache;\t\t//\tthe game cache","    this.input;\t\t//\tthe global input manager (you can access this.input.keyboard, this.input.mouse, as well from it)","    this.load;\t\t//\tfor preloading assets","    this.math;\t\t//\tlots of useful common math operations","    this.sound;\t\t//\tthe sound manager - add a sound, play one, set-up markers, etc","    this.stage;\t\t//\tthe game stage","    this.time;\t\t//\tthe clock","    this.tweens;    //  the tween manager","    this.state;\t    //\tthe state manager","    this.world;\t\t//\tthe game world","    this.particles;\t//\tthe particle manager","    this.physics;\t//\tthe physics manager","    this.rnd;\t\t//\tthe repeatable random number generator","    //\tYou can use any of these from any function within this State.","    //\tBut do consider them as being 'reserved words',","    // i.e. don't create a property for your own game called \"world\" or you'll over-write the world reference.","    ","    //\tYou can use any of these from any function within this State.","    //\tBut do consider them as being 'reserved words', i.e. don't create a property for your own game called \"world\" or you'll over-write the world reference.","};","","RoBlockWar.Game.prototype = {","\tcreate: function () {","\t  // allow game to run in background (keep going even if switch tabs/windows)","\t  this.game.disableVisibilityChange = true;","\t  ","\t  //  Resize our game world to be a 2000 x 2000 square","    this.game.world.setBounds(0, 0, 500, 500);","","    //  Our tiled scrolling background","    this.land = this.game.add.tileSprite(0, 0, 800, 600, 'earth');","    this.land.fixedToCamera = true;","","    //  Our tiled scrolling background","    this.land = this.game.add.sprite(0, 0, 'earth');","    ","    //create robots","    for(var i = 0; i < this.game.Robots.length; i++)","    { ","      //  The base of our robot","      var botView = this.game.add.sprite(0, 0, 'robot', 'tank1');","      botView.anchor.setTo(0.5, 0.5);","      botView.animations.add('move', ['tank1', 'tank2', 'tank3', 'tank4', 'tank5', 'tank6'], 20, true);","  ","      //  This will force it to decelerate and limit its speed","      this.game.physics.enable(botView, Phaser.Physics.ARCADE);","      botView.body.drag.set(0.2);","      botView.body.maxVelocity.setTo(400, 400);","      botView.body.collideWorldBounds = true;","  ","      //  Finally the turret that we place on-top of the tank body","      var turret = this.game.add.sprite(0, 0, 'robot', 'turret');","      turret.anchor.setTo(0.3, 0.5);","  ","      //  The enemies bullet group","      enemyBullets = this.game.add.group();","      enemyBullets.enableBody = true;","      enemyBullets.physicsBodyType = Phaser.Physics.ARCADE;","      enemyBullets.createMultiple(100, 'bullet');","      ","      enemyBullets.setAll('anchor.x', 0.5);","      enemyBullets.setAll('anchor.y', 0.5);","      enemyBullets.setAll('outOfBoundsKill', true);","      enemyBullets.setAll('checkWorldBounds', true);","      ","      this.game.Robots[i].init(botView, turret);","      ","      var runner = new AsyncInterpreterRunner(this.game.Robots[i].CodeToRun, this.game.Robots[i].createInterpreterInitializer(this.game.highlightBlockFunc));","      this.game.Scheduler.submit(runner, 'process' + this.game.Robots[i].processId);","    }","    this.game.Scheduler.run(this.quitGame);","\t},","  ","\tupdate: function () {","\t    var startWith = (this.time.totalElapsedSeconds() % this.game.Robots.length) / 100;","\t    ","        for(var i = 0; i < this.game.Robots.length; i++){","            this.game.physics.arcade.collide(this.game.Robots[i].RobotPlayer, this.blockedLayer);","            this.game.Robots[i].update();","        }","        for(var i = 0; i < startWith; i++){","            this.game.physics.arcade.collide(this.game.Robots[i].RobotPlayer, this.blockedLayer);","            this.game.Robots[i].update();","        }","\t},","","\tquitGame: function (pointer) {","\t\t//\tHere you should destroy anything you no longer need.","\t\t//\tStop music, delete sprites, purge caches, free resources, all that good stuff.","","\t\t//\tThen let's go back to the main menu.","\t\tthis.state.shutDown();","\t\tthis.game.destroy();","\t\tthis.destroy();","\t}","};","","RoBlockWar.BuildGame = function(robotCodes, highlightFunc) {","  ","  var bots = [];","  for(var i = 0; i < robotCodes.length; i++){","      var newRobot = new RoBlockWar_Robot(i, \"DevBot\" + i, robotCodes[i]);","      bots.push(newRobot);","  }","\tvar game = new Phaser.Game(\"100%\", \"100%\", Phaser.AUTO, '');","","  game.Robots = bots;","  game.highlightBlockFunc = highlightFunc;","\tgame.Scheduler = new AsyncScheduler();","\tgame.Scheduler.paused = false;","\t","\tvar orig_doWork = game.Scheduler._doWork;","\tgame.Scheduler._doWork = function(doneCallback){","\t  if(!game.Scheduler.paused){","\t    orig_doWork.call(game.Scheduler, doneCallback);","\t  }","\t}","  game.DevPause = function(toggle){","    window.console.log('setting pause with toggle {' + toggle + '}');","    this.paused = toggle;","    this.Scheduler.paused = toggle;","    this.Scheduler.run(function(){});","  }","","\t//\tAdd the States the game has.","\tgame.state.add('Boot', RoBlockWar.Boot);","\tgame.state.add('Preloader', RoBlockWar.Preloader);","\tgame.state.add('Game', RoBlockWar.Game);","\tgame.state.add('Done', RoBlockWar.Done);","\t","\t//\tNow start the Boot state.","\tgame.state.start('Boot');","\treturn game;","};","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":40,"column":39},"end":{"row":40,"column":53},"action":"remove","lines":["scorched_earth"]},{"start":{"row":40,"column":39},"end":{"row":40,"column":40},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":40,"column":40},"end":{"row":40,"column":41},"action":"insert","lines":["k"]}]}],[{"group":"doc","deltas":[{"start":{"row":40,"column":41},"end":{"row":40,"column":42},"action":"insert","lines":["y"]}]}]]},"timestamp":1428559320000}